#!/usr/bin/env python3

import json
import os
import re
import subprocess
import sys

base_dpi = 96
display_scales = {
    '4d10211400000000': 2,  # gallifrey
}

def i3_focused_display_scale():
    workspaces = i3_workspaces()
    display = i3_focused_display(workspaces)
    info = DisplayInfo(display)
    scale = display_scales.get(info.uid)

    if scale is None:
        scale = round(info.dpi() / base_dpi)

    return scale


def i3_workspaces():
    return json.loads(subprocess.check_output([
        'i3-msg', '-t' 'get_workspaces'
    ]))


def i3_focused_display(i3_workspaces):
    return next(workspace['output']
                for workspace in i3_workspaces
                if workspace['focused'] is True)


class DisplayInfo:
    def __init__(self, display):
        xrandr = subprocess.Popen(['xrandr', '--props'], stdout=subprocess.PIPE)
        lines = iter(xrandr.stdout.readline, None)
        for line in lines:
            match = re.match(re.escape(display) + r' connected.*?([0-9]+)x([0-9]+).*?([0-9]+)mm x ([0-9]+)mm$', line.decode('utf-8'))
            if match is not None:
                self.xpixels = int(match.group(1))
                self.ypixels = int(match.group(2))
                self.xmm = int(match.group(3))
                self.ymm = int(match.group(4))

                next(lines)
                edid = next(lines).decode('utf-8')
                self.uid = re.search(r'00ffffffffffff00([0-9a-f]{16})', edid).group(1)
                return

        raise LookupError

    def dpi(self):
        xdpi = self.xpixels / mm_to_inches(self.xmm)
        ydpi = self.ypixels / mm_to_inches(self.ymm)
        return (xdpi + ydpi) / 2


def xserver_dpi():
    xdpyinfo = subprocess.Popen('xdpyinfo', stdout=subprocess.PIPE)
    for line in xdpyinfo.stdout:
        match = re.search(r'resolution:\s+([0-9]+)x([0-9]+)', line.decode('utf-8'))
        if match is not None:
            xdpi, ydpi = (int(dim) for dim in match.groups())
            return (xdpi + ydpi) / 2

    return LookupError


def mm_to_inches(mm):
    return mm * 0.03937008


# Round display scale until GDK supports fractional scaling
display_scale = i3_focused_display_scale()
text_scale = xserver_dpi() / base_dpi
subprocess.Popen(sys.argv[1:], env={
    **os.environ,
    'GDK_SCALE': str(display_scale),
    'GDK_DPI_SCALE': str(1 / text_scale),  # Reverses text scaling derived from X server DPI
    'QT_AUTO_SCREEN_SCALE_FACTOR': '1',
    'WINIT_HIDPI_FACTOR': str(display_scale),
})
